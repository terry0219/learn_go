正常情况下，新激活的goroutine的结束过程是不可控制的，唯一可以保证终止goroutine的行为是main goroutine的终止。也就是说，我们并不知道哪个goroutine什么时候结束。

但很多情况下，我们正需要知道goroutine是否完成。这需要借助sync包的WaitGroup来实现。

它有3个方法：

	1. Add()：每次激活想要被等待完成的goroutine之前，先调用Add()，用来设置或添加要等待完成的goroutine数量
		例如Add(2)或者两次调用Add(1)都会设置等待计数器的值为2，表示要等待2个goroutine完成。
		
	2. Done()：每次需要等待的goroutine在真正完成之前，应该调用该方法来人为表示goroutine完成了，该方法会对等待计数器减1

	3. Wait()：在等待计数器减为0之前，Wait()会一直阻塞当前的goroutine
		也就是说，Add()用来增加要等待的goroutine的数量，Done()用来表示goroutine已经完成了，减少一次计数器，Wait()用来等待所有需要等待的goroutine完成。

下面是一个示例，通过示例很容易理解。

package main

import (  
    "fmt"
    "sync"
    "time"
)

func process(i int, wg *sync.WaitGroup) {  
    fmt.Println("started Goroutine ", i)
    time.Sleep(2 * time.Second)
    fmt.Printf("Goroutine %d ended\n", i)
    wg.Done()
}

func main() {  
    no := 3
    var wg sync.WaitGroup
    for i := 0; i < no; i++ {
        wg.Add(1)
        go process(i, &wg)
    }
    wg.Wait() //会阻塞，一直等到其他goroutine都执行完成
    fmt.Println("All go routines finished executing")
}

上面激活了3个goroutine，每次激活goroutine之前，都先调用Add()方法增加一个需要等待的goroutine计数。每个goroutine都运行process()函数，这个函数在执行完成时需要调用Done()方法来表示goroutine的结束。激活3个goroutine后，main goroutine会执行到Wait()，由于每个激活的goroutine运行的process()都需要睡眠2秒，所以main goroutine在Wait()这里会阻塞一段时间(大约2秒)，当所有goroutine都完成后，等待计数器减为0，Wait()将不再阻塞，于是main goroutine得以执行后面的Println()。


还有一点需要特别注意的是process()中使用指针类型的*sync.WaitGroup作为参数，这里不能使用值类型的sync.WaitGroup作为参数，因为这意味着每个goroutine都拷贝一份wg，每个goroutine都使用自己的wg。这显然是不合理的，这3个goroutine应该共享一个wg，才能知道这3个goroutine都完成了。实际上，如果使用值类型的参数，main goroutine将会永久阻塞而导致产生死锁。
