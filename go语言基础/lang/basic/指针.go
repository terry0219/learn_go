/*
指针
指针不能运算

*/

package main

import "fmt"

/*
变量、指针和地址三者的关系是，每个变量都拥有地址，指针的值就是地址
取地址操作符&和取值操作符*是一对互补操作符，&取出地址，*根据地址取出地址指向的值


变量、指针地址、指针变量、取地址、取值的相互关系和特性如下：
  对变量进行取地址操作使用&操作符，可以获得这个变量的指针变量。
  指针变量的值是指针地址。
  对指针变量进行取值操作使用*操作符，可以获得指针变量指向的原变量的值。

var a int = 2            //定义a为int类型等于2
var pa *int = &a        //&a取出a变量的指针地址， 赋給pa变量，*int代表是int的指针类型
*pa = 3                 // 将3赋給 *pa,  pa是指针地址，*pa是实际的变量，因为pa指针指向了a变量，所以这里修改了a的值
fmt.Println(a)


值传递 pass_by_val   拷贝一个新的变量赋值
引用传递 pass_by_ref  引用当前的变量赋值
go语言只有值传递一种方式
*/

//使用指针参数，用于引用传递;
func swap(a, b *int) {
	*b, *a = *a, *b // 交换两个变量的值
}

//还一种写法，建议这种
//func swap(a,b int) (int,int) {
//	return b,a
//}
//a, b := 3,4
//a, b = swap(a,b)

func main() {
	a := 3
	b := 4
	swap(&a, &b)
	fmt.Println(a, b) // 4 3
}
