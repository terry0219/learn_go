package parser

import (
	"testing"

	"io/ioutil"
)

func TestParseCityList(t *testing.T) {
	contents, err := ioutil.ReadFile(
		"citylist_test_data.html") //将页面拷贝到本地来解析

	if err != nil {
		panic(err)
	}

	result := ParseCityList(contents, "")

	const resultSize = 470
	expectedUrls := []string{
		"http://www.zhenai.com/zhenghun/aba",
		"http://www.zhenai.com/zhenghun/akesu",
		"http://www.zhenai.com/zhenghun/alashanmeng",
	}

	if len(result.Requests) != resultSize {
		t.Errorf("result should have %d "+
			"requests; but had %d",
			resultSize, len(result.Requests))
	}
	for i, url := range expectedUrls {
		if result.Requests[i].Url != url {
			t.Errorf("expected url #%d: %s; but "+
				"was %s",
				i, url, result.Requests[i].Url)
		}
	}
}


-----------------------------------------------------
在fetcher.go文件中有个小问题

func determinEncoding(r io.Reader) endcoding.Encoding {
	bytes, err := bufio.NewReader(r).Peek(1024) //从io.Reader中读取1024字节，那么后面在读的话，就从1025开始读了
}


func Fetch() {
	e := determinEncoding(resp.Body)   //从io.Reader中读取1024字节
	utf8Reader := transform.NewReader(resp.Body, e.NewDecoder()) //后面就从1025开始读了
	return ioutil.ReadAll(utf8Reader)
}


修改为:

func Fetch() {
	bodyReader := bufio.NewReader(resp.Body) //在Peek之前，先Bufio.Reader一下
	e := determineEncoding(bodyReader)
	utf8Reader := transform.NewReader(bodyReader,e.NewDecoder())
	return ioutil.ReadAll(utf8Reader)
}
