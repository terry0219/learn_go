问题:
前面我们通过
1. 先获取城市列表解析器获取 {城市 城市url}, 
2. 在通过城市解析器获取用户列表{用户名 用户url}
3. 最后通过用户解析器获取用户的详细信息

最后一步的用户名可以在最后一步获取用户详情时获取; 也可以在第二步获取用户列表时取到用户名，在传给第三步(这里采用这步)


在城市解析器city.go中是可以获取到用户名的, m[2]就是匹配到的用户名
func ParseCity(contents []byte) engine.ParseResult {
	re := regexp.MustCompile(cityListRe) 
	matches := re.FindAllSubmatch(contents,-1)
	
	result := engine.ParseResult{}
	for _,m := matches {
		result.Items = append(result.Items, "User " + m[2])  //把用户名称写到Items里
		result.Requests = append(result.Requests, engine.Request{
							"Url":string(m[1]),
							"ParserFunc": ParseProfile, 
		})
		
		fmt.Printf("User: %s, URL: %s",m[2], m[1])
	}

	fmt.Printf("Matches found: %d\n", len(matches))
	
	return result
}

其中citylist.go --> city.go --> profile.go上下级的连接关系是通过engine.Request{"Url":string(m[1]),"ParserFunc": engine.NilParser,}连接起来的。

可以包装一下"ParserFunc": ParseProfile,  ParseProfile这个函数包装一下，把m[2]用户名传给ParseProfile

1. 先对ParseProfile函数的形参做下修改,加一个name的参数(用户名)
func ParseProfile(contents []byte, name string) {
	//在加一句
	profile := model.Profile{}
	profile.Name = name   这样就把用户名赋值过来了
}

2.在city.go中，对ParseProfiel包装一下，写一个匿名函数

func ParseCity(contents []byte) engine.ParseResult {
	re := regexp.MustCompile(cityListRe) 
	matches := re.FindAllSubmatch(contents,-1)
	
	result := engine.ParseResult{}
	for _,m := matches {
		name := m[2]
		result.Items = append(result.Items, "User " + name)  //把用户名称写到Items里
		result.Requests = append(result.Requests, engine.Request{
							"Url":string(m[1]),
							//ParserFunc是func([]byte) ParseResult类型; 传值的时候只要传函数名称即可; 调用的话就用x.ParserFunc(content)
							"ParserFunc": func(c []byte) engine.ParseResult{ //这里写一个匿名函数，包装ParseProfile
								return PaserProfile(c, name) //name是通过外面函数传进来的
								}, 
		})
		
		fmt.Printf("User: %s, URL: %s",m[2], m[1])
	}

	fmt.Printf("Matches found: %d\n", len(matches))
	
	return result
}



		
3. 控制for循环的一个方法

limit := 10

for {
	xxxx
	limit--
	if limit == 0 {
		break
	}
}

